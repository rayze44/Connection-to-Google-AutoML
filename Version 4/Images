import os
import cv2
from google.cloud import automl_v1beta1
import shutil
import image_slicer
from image_slicer import Tile
from PIL import Image
from math import floor


def create(path):
    file_prompt_1 = os.path.exists("C:\\Users\\Ray Ooi\\Desktop\\" + path)
    if (file_prompt_1 == True):
        shutil.rmtree("C:\\Users\\Ray Ooi\\Desktop\\" + path, ignore_errors=True)
    os.makedirs("C:\\Users\\Ray Ooi\\Desktop\\" + path)

def Rcreate(path):
    file_prompt_1 = os.path.exists("C:\\Users\\Ray Ooi\\Desktop\\Final Result\\" + path)
    if (file_prompt_1 == True):
        shutil.rmtree("C:\\Users\\Ray Ooi\\Desktop\\Final Result\\" + path, ignore_errors=True)
    os.makedirs("C:\\Users\\Ray Ooi\\Desktop\\Final Result\\" + path)

def Screate(path):
    file_prompt_1 = os.path.exists("C:\\Users\\Ray Ooi\\Desktop\\Final Result\\" + path)
    if (file_prompt_1 == True):
        shutil.rmtree("C:\\Users\\Ray Ooi\\Desktop\\Final Result\\" + path, ignore_errors=False)
    os.makedirs("C:\\Users\\Ray Ooi\\Desktop\\Final Result\\" + path + "\\Splitted Images")

def get_prediction(content, project_id, model_id, file_path, array, defect_name):
    prediction_client = automl_v1beta1.PredictionServiceClient()
    name = 'projects/{}/locations/us-central1/models/{}'.format(project_id, model_id)
    payload = {'image': {'image_bytes': content}}
    params = {"score_threshold": "0.9"}
    request = prediction_client.predict(name, payload, params)
    labels = request.payload
    defect = True

    if not labels:
        image_class = "No Defect"
        print("No " + defect_name + " detected...")
        defect = False
        return None

    if defect == True:
        Defect[array] = 1
        indiv[array] = 1
        print(defect_name + " detected...")
        IMG_label[array] = labels
        return True


def crack(image):
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "ENTER DIRECTORY TO MODEL'S AUTHENTICATION KEY"
    project_id = "ENTER PROJ ID"
    model_id = "ENTER MODEL ID"
    array = 0

    with open(image, 'rb') as ff:
        content = ff.read()

    presence = get_prediction(content, project_id, model_id, image, array, "crack")
    return presence


def dent(image):
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "ENTER DIRECTORY TO MODEL'S AUTHENTICATION KEY"
    project_id = "ENTER PROJ ID"
    model_id = "ENTER MODEL ID"
    array = 1

    with open(image, 'rb') as ff:
        content = ff.read()

    presence = get_prediction(content, project_id, model_id, image, array, "dent")
    return presence


def lightning(image):
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "ENTER DIRECTORY TO MODEL'S AUTHENTICATION KEY"
    project_id = "ENTER PROJ ID"
    model_id = "ENTER MODEL ID"
    array = 2

    with open(image, 'rb') as ff:
        content = ff.read()

    presence = get_prediction(content, project_id, model_id, image, array, "lightning Damage")
    return presence


def bounding_box(labels, file_path, colour):
    img = cv2.imread(file_path)

    first_x = labels[0].image_object_detection.bounding_box.normalized_vertices[0].x
    first_y = labels[0].image_object_detection.bounding_box.normalized_vertices[0].y

    second_x = labels[0].image_object_detection.bounding_box.normalized_vertices[1].x
    second_y = labels[0].image_object_detection.bounding_box.normalized_vertices[1].y

    height, width, channels = img.shape
    ymin = int(max(1, (first_y * height)))
    xmin = int(max(1, (first_x * width)))
    ymax = int(min(height, (second_y * height)))
    xmax = int(min(width, (second_x * width)))

    cv2.rectangle(img, (xmin, ymin), (xmax, ymax), colour, 5)
    cv2.imwrite(file_path, img)


def get_results(labels):
    image_class = labels[0].display_name  # get class
    score_result = labels[0].image_object_detection
    image_score = score_result.score  # get score

    str_class = str(image_class)
    image_score = round(image_score, 5)
    str_score = str(image_score)
    return str_class, str_score


def check_multiple(number_defects, image_class, image_score, name):
    if number_defects == 0:
        name = image_class + "_" + image_score
        return name
    else:
        name = name + " & " + image_class + "_" + image_score
        return name


#***************************Start of Program*********************************

create("Original IMG")

create("Final Result")

#Moving & Renaming Images
img_path = "C:\\Users\\Ray Ooi\\Desktop\\DROP IMG"
img_list = os.listdir(img_path)
number = 1

for file in img_list:
    img_name = file
    snumber = str(number)
    location = "C:\\Users\\Ray Ooi\\Desktop\\DROP IMG\\" + img_name
    destination = "C:\\Users\\Ray Ooi\\Desktop\\Original IMG\\Sample " + snumber + ".jpg"
    shutil.copyfile(location, destination)

    number = number + 1

#Splitting Images
img_path = "C:\\Users\\Ray Ooi\\Desktop\\Original IMG"
dest_path = "C:\\Users\\Ray Ooi\\Desktop\\Final Result\\"
img_list = os.listdir(img_path)

col = int(input("Number of columns: "))
row = int(input("Number of rows: "))

print("\nSplitting Images...")
IMG_data = []

for img in img_list:
    img_name = img[:-4]
    Rcreate(img_name)
    Screate(img_name)

    location = img_path + "\\" + img_name + ".jpg"
    destination1 = dest_path + img_name + "\\Splitted Images\\" + img_name + ".jpg"
    shutil.copyfile(location, destination1)

    tiles = image_slicer.slice(destination1, None, col, row)
    IMG_data.append(tiles)
    os.remove(destination1)

print("Finished splitting images...")

#AutoML Predictions
path = "C:\\Users\\Ray Ooi\\Desktop\\Final Result"
list = os.listdir(path)

print("\nBeginning AutoML Prediction...")
IMG_number = 0

for name in list:
    print("\nAnalysing image " + name + "...")
    folder_path = "C:\\Users\\Ray Ooi\\Desktop\\Final Result\\" + name + "\\Splitted Images"
    list2 = os.listdir(folder_path)
    Defect = [0, 0, 0]

    im = Image.open("C:\\Users\\Ray Ooi\\Desktop\\Original IMG\\" + name + ".jpg")
    im_w, im_h = im.size
    frame_position = 0
    For_joining = IMG_data[IMG_number]

    for img in list2:
        image_path = folder_path + "\\" +img
        IMG_label = [0, 0, 0]
        print("\n\nAnalysing " + img)

        indiv = [0, 0, 0]

        check1 = crack(image_path)
        check2 = dent(image_path)
        check3 = lightning(image_path)

        #Evaluation of results
        if check1 == True or check2 == True or check3 == True:

            number_defects = 0
            Dname = ""

            if indiv[0] == 1:
                colour = (255, 0, 0)
                bounding_box(IMG_label[0], image_path, colour)
                image_class, image_score = get_results(IMG_label[0])
                Dname = image_class + "_" + image_score

                number_defects = 1
            if indiv[1] == 1:
                colour = (0, 255, 0)
                bounding_box(IMG_label[1], image_path, colour)
                image_class, image_score = get_results(IMG_label[1])
                Dname = check_multiple(number_defects, image_class, image_score, Dname)

                number_defects = 1
            if indiv[2] == 1:
                colour = (0, 0, 255)
                bounding_box(IMG_label[2], image_path, colour)
                image_class, image_score = get_results(IMG_label[2])
                Dname = check_multiple(number_defects, image_class, image_score, Dname)

                number_defects = 1

            # Renaming of Split images
            coords = img[9:-4]
            new_name = folder_path + "\\(" + coords + ")_" + Dname + ".png"
            os.renames(image_path, new_name)

            #update list with edited images
            Edited_Image = Image.open(new_name)
            increment_w, increment_h = int(floor(im_w / col)), int(floor(im_h / row))
            w_coords = int(img[12:-4]) - 1
            h_coords = int(img[9:-7]) - 1
            coordinates = (w_coords * increment_w, h_coords * increment_h)
            tile = Tile(Edited_Image, number=frame_position+1 ,coords=coordinates)
            For_joining[frame_position] = tile
        else:
            Dname = "No defect"

            #Renaming of Split images
            coords = img[9:-4]
            new_name = folder_path + "\\(" + coords + ")_" + Dname + ".png"
            os.renames(image_path, new_name)

        frame_position = frame_position + 1
        Image.open(new_name)

    # join images
    print("\n\nStarting to join split images...\n\n")
    saved_path = "C:\\Users\\Ray Ooi\\Desktop\\Final Result\\" + name + "\\Joined Image.jpg"
    IMG_2save = image_slicer.join(For_joining, im_w, im_h)
    IMG_2save.save(saved_path)
    print("Joining Completed...\n\n")


    old_name = path + "\\" + name

    if Defect[0] == 0 and Defect[1] == 0 and Defect[2] == 0:
        new_name = old_name + "_No Defect"

    else:
        Defect_name = ""
        if Defect[0] == 1:
            Defect_name = "_Crack"
        if Defect[1] == 1:
            Defect_name = Defect_name + "_Dents"
        if Defect[2] == 1:
            Defect_name = Defect_name + "_Lightning Damage"
        new_name = old_name + Defect_name

    os.renames(old_name, new_name)
    print("Analysis of " + img + " has been completed...")
    IMG_number = IMG_number + 1
    print("\n" * 30)

print("Analysis of all images has been completed...\n")
print("Summary of Results...")

result = os.listdir("C:\\Users\\Ray Ooi\\Desktop\\Final Result")
for name in result:
    print(name)

print("\n\nPlease view the detailed results and images in the folder, Final Result, located on the desktop...")
